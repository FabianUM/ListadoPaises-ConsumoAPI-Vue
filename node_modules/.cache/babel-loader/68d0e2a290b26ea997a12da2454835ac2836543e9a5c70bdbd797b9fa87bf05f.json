{"ast":null,"code":"import gql from 'graphql-tag';\nimport { apolloClient } from '@/apollo-client';\nimport pixabayClient from '@/axios';\nexport default {\n  name: 'HomeView',\n  data() {\n    return {\n      countries: []\n    };\n  },\n  async mounted() {\n    try {\n      const response = await apolloClient.query({\n        query: gql`\n          query {\n            countries {\n              code\n              name\n              continent {\n                name\n              }\n            }\n          }\n        `\n      });\n      let countries = response.data.countries;\n\n      // Limitar a las primeras 12 países\n      countries = countries.slice(0, 12);\n\n      // Fetch images from Pixabay for each country\n      for (let country of countries) {\n        const imageResponse = await pixabayClient.get('', {\n          params: {\n            q: country.name,\n            image_type: 'photo',\n            per_page: 3 // Ajusta según sea necesario\n          }\n        });\n        const image = imageResponse.data.hits[0]?.webformatURL;\n        country.image = image;\n      }\n      this.countries = countries;\n    } catch (error) {\n      console.error('Error fetching countries or images:', error);\n    }\n  }\n};","map":{"version":3,"names":["gql","apolloClient","pixabayClient","name","data","countries","mounted","response","query","slice","country","imageResponse","get","params","q","image_type","per_page","image","hits","webformatURL","error","console"],"sources":["src/views/HomeView.vue"],"sourcesContent":["<!--<template>\r\n  <div>\r\n    <div class=\"card-deck\">\r\n      <div class=\"card\" v-for=\"country in countries\" :key=\"country.code\">\r\n        <img class=\"card-img-top\" :src=\"country.image\" alt=\"Country image\">\r\n        <div class=\"card-body\">\r\n          <h5 class=\"card-title\">{{ country.name }}</h5>\r\n          <p class=\"card-text\">{{ country.continent.name }}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport gql from 'graphql-tag';\r\nimport { apolloClient } from '@/apollo-client';\r\nimport pixabayClient from '@/axios';\r\n\r\nexport default {\r\n  name: 'HomeView',\r\n  data() {\r\n    return {\r\n      countries: [],\r\n    };\r\n  },\r\n  async mounted() {\r\n    try {\r\n      const response = await apolloClient.query({\r\n        query: gql`\r\n          query {\r\n            countries {\r\n              code\r\n              name\r\n              continent {\r\n                name\r\n              }\r\n            }\r\n          }\r\n        `,\r\n      });\r\n\r\n      const countries = response.data.countries;\r\n\r\n      // Fetch images from Pixabay for each country\r\n      for (let country of countries) {\r\n        const imageResponse = await pixabayClient.get('', {\r\n          params: {\r\n            q: country.name,\r\n            image_type: 'photo',\r\n            per_page: 3,\r\n          },\r\n        });\r\n        const image = imageResponse.data.hits[0]?.webformatURL;\r\n        country.image = image;\r\n      }\r\n\r\n      this.countries = countries;\r\n    } catch (error) {\r\n      console.error('Error fetching countries or images:', error);\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.card-deck {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-around;\r\n}\r\n.card {\r\n  width: 18rem;\r\n  margin-bottom: 1rem;\r\n}\r\n</style>-->\r\n\r\n<template>\r\n  <div>\r\n    <div class=\"card-deck\">\r\n      <div class=\"card\" v-for=\"country in countries\" :key=\"country.code\">\r\n        <img class=\"card-img-top\" :src=\"country.image\" alt=\"Country image\">\r\n        <div class=\"card-body\">\r\n          <h5 class=\"card-title\">{{ country.name }}</h5>\r\n          <p class=\"card-text\">{{ country.continent.name }}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport gql from 'graphql-tag';\r\nimport { apolloClient } from '@/apollo-client';\r\nimport pixabayClient from '@/axios';\r\n\r\nexport default {\r\n  name: 'HomeView',\r\n  data() {\r\n    return {\r\n      countries: [],\r\n    };\r\n  },\r\n  async mounted() {\r\n    try {\r\n      const response = await apolloClient.query({\r\n        query: gql`\r\n          query {\r\n            countries {\r\n              code\r\n              name\r\n              continent {\r\n                name\r\n              }\r\n            }\r\n          }\r\n        `,\r\n      });\r\n\r\n      let countries = response.data.countries;\r\n\r\n      // Limitar a las primeras 12 países\r\n      countries = countries.slice(0, 12);\r\n\r\n      // Fetch images from Pixabay for each country\r\n      for (let country of countries) {\r\n        const imageResponse = await pixabayClient.get('', {\r\n          params: {\r\n            q: country.name,\r\n            image_type: 'photo',\r\n            per_page: 3,  // Ajusta según sea necesario\r\n          },\r\n        });\r\n        const image = imageResponse.data.hits[0]?.webformatURL;\r\n        country.image = image;\r\n      }\r\n\r\n      this.countries = countries;\r\n    } catch (error) {\r\n      console.error('Error fetching countries or images:', error);\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.card-deck {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-around;\r\n}\r\n.card {\r\n  width: 18rem;\r\n  margin-bottom: 1rem;\r\n}\r\n</style>\r\n\r\n"],"mappings":"AA4FA,OAAAA,GAAA;AACA,SAAAC,YAAA;AACA,OAAAC,aAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;IACA;EACA;EACA,MAAAC,QAAA;IACA;MACA,MAAAC,QAAA,SAAAN,YAAA,CAAAO,KAAA;QACAA,KAAA,EAAAR,GAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACA;MAEA,IAAAK,SAAA,GAAAE,QAAA,CAAAH,IAAA,CAAAC,SAAA;;MAEA;MACAA,SAAA,GAAAA,SAAA,CAAAI,KAAA;;MAEA;MACA,SAAAC,OAAA,IAAAL,SAAA;QACA,MAAAM,aAAA,SAAAT,aAAA,CAAAU,GAAA;UACAC,MAAA;YACAC,CAAA,EAAAJ,OAAA,CAAAP,IAAA;YACAY,UAAA;YACAC,QAAA;UACA;QACA;QACA,MAAAC,KAAA,GAAAN,aAAA,CAAAP,IAAA,CAAAc,IAAA,KAAAC,YAAA;QACAT,OAAA,CAAAO,KAAA,GAAAA,KAAA;MACA;MAEA,KAAAZ,SAAA,GAAAA,SAAA;IACA,SAAAe,KAAA;MACAC,OAAA,CAAAD,KAAA,wCAAAA,KAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}