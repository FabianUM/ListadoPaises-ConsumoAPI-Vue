{"ast":null,"code":"import gql from 'graphql-tag';\nimport { apolloClient } from '@/apollo-client';\nimport pixabayClient from '@/axios';\nexport default {\n  name: 'HomeView',\n  data() {\n    return {\n      countries: [],\n      searchQuery: '',\n      filteredCountries: []\n    };\n  },\n  async mounted() {\n    try {\n      const response = await apolloClient.query({\n        query: gql`\n          query {\n            countries {\n              code\n              name\n              capital\n              continent {\n                name\n              }\n            }\n          }\n        `\n      });\n      let countries = response.data.countries;\n\n      // Limitar a las primeras 12 países\n      //countries = countries.slice(0, 12);\n      countries = countries.slice(30, 44);\n\n      // Fetch images from Pixabay for each country flag\n      for (let country of countries) {\n        const flagResponse = await pixabayClient.get('', {\n          params: {\n            q: `${country.name} flag`,\n            image_type: 'photo',\n            per_page: 3\n          }\n        });\n        const flag = flagResponse.data.hits[0]?.webformatURL;\n        country.flag = flag;\n      }\n\n      // Fetch images from Pixabay for each country capital\n      for (let country of countries) {\n        const imageResponse = await pixabayClient.get('', {\n          params: {\n            q: country.capital,\n            image_type: 'photo',\n            per_page: 3\n          }\n        });\n        const image = imageResponse.data.hits[0]?.webformatURL;\n        country.image = image;\n      }\n      this.countries = countries;\n      this.filteredCountries = countries;\n    } catch (error) {\n      console.error('Error fetching countries or images:', error);\n    }\n  },\n  computed: {\n    filterCountries() {\n      this.filteredCountries = this.countries.filter(country => country.name.toLowerCase().includes(this.searchQuery.toLowerCase()));\n    }\n  },\n  watch: {\n    searchQuery: 'filterCountries'\n  }\n};","map":{"version":3,"names":["gql","apolloClient","pixabayClient","name","data","countries","searchQuery","filteredCountries","mounted","response","query","slice","country","flagResponse","get","params","q","image_type","per_page","flag","hits","webformatURL","imageResponse","capital","image","error","console","computed","filterCountries","filter","toLowerCase","includes","watch"],"sources":["src/views/HomeView.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"search-bar\">\r\n      <input\r\n        type=\"text\"\r\n        v-model=\"searchQuery\"\r\n        placeholder=\"Escribe el país que deseas ver\"\r\n      />\r\n      <button >Buscar</button>\r\n    </div>\r\n    <div class=\"card-deck\">\r\n      <div class=\"card\" v-for=\"country in countries\" :key=\"country.code\">\r\n        <img class=\"card-img-top\" :src=\"country.image\" alt=\"Country image\">\r\n        <div class=\"card-body\">\r\n          <img class=\"flag-icon\" :src=\"country.flag\" alt=\"Country flag\">\r\n          <div class=\"card-data\">\r\n            <p class=\"card-name\">{{ country.name }}</p>\r\n            <p class=\"card-continent\">{{ country.continent.name }}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport gql from 'graphql-tag';\r\nimport { apolloClient } from '@/apollo-client';\r\nimport pixabayClient from '@/axios';\r\n\r\nexport default {\r\n  name: 'HomeView',\r\n  data() {\r\n    return {\r\n      countries: [],\r\n      searchQuery: '',\r\n      filteredCountries: [],\r\n    };\r\n  },\r\n  async mounted() {\r\n    try {\r\n      const response = await apolloClient.query({\r\n        query: gql`\r\n          query {\r\n            countries {\r\n              code\r\n              name\r\n              capital\r\n              continent {\r\n                name\r\n              }\r\n            }\r\n          }\r\n        `,\r\n      });\r\n\r\n      let countries = response.data.countries;\r\n\r\n      // Limitar a las primeras 12 países\r\n      //countries = countries.slice(0, 12);\r\n      countries = countries.slice(30, 44);\r\n\r\n      // Fetch images from Pixabay for each country flag\r\n      for (let country of countries) {\r\n        const flagResponse = await pixabayClient.get('', {\r\n          params: {\r\n            q: `${country.name} flag`,\r\n            image_type: 'photo',\r\n            per_page: 3,\r\n          },\r\n        });\r\n        const flag = flagResponse.data.hits[0]?.webformatURL;\r\n        country.flag = flag;\r\n      }\r\n\r\n      // Fetch images from Pixabay for each country capital\r\n      for (let country of countries) {\r\n        const imageResponse = await pixabayClient.get('', {\r\n          params: {\r\n            q: country.capital,\r\n            image_type: 'photo',\r\n            per_page: 3,\r\n          },\r\n        });\r\n        const image = imageResponse.data.hits[0]?.webformatURL;\r\n        country.image = image;\r\n      }\r\n\r\n      this.countries = countries;\r\n      this.filteredCountries = countries;\r\n    } catch (error) {\r\n      console.error('Error fetching countries or images:', error);\r\n    }\r\n  },\r\n  computed: {\r\n    filterCountries() {\r\n      this.filteredCountries = this.countries.filter(country =>\r\n        country.name.toLowerCase().includes(this.searchQuery.toLowerCase())\r\n      );\r\n    },\r\n  },\r\n  watch: {\r\n    searchQuery: 'filterCountries',\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.search-bar {\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-bottom: 20px;\r\n}\r\n.search-bar input {\r\n  padding: 5px;\r\n  font-size: 16px;\r\n  margin-right: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n}\r\n.search-bar button {\r\n  padding: 5px 10px;\r\n  font-size: 16px;\r\n  border: none;\r\n  background-color: #007bff;\r\n  color: white;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n}\r\n.search-bar button:hover {\r\n  background-color: #0056b3;\r\n}\r\n.card-deck {\r\n  display: grid !important;\r\n  grid-template-columns: repeat(3, 1fr) !important;\r\n  gap: 20px !important;\r\n  padding: 3rem !important;\r\n}\r\n.card {\r\n  width: 18rem;\r\n  margin-bottom: 1.5rem;\r\n  border: 1px solid #ccc;\r\n  border-radius: 100rem;\r\n  box-shadow: 0 8px 8px rgba(0, 0, 0, 0.1); \r\n}\r\n.card-body {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n.card-img-top{\r\n  height: 10rem;\r\n}\r\n.flag-icon {\r\n  width: 50px;\r\n  height: 40px;\r\n  margin-right: 10px;\r\n  vertical-align: middle;\r\n}\r\n.card-data{\r\n  display: block;\r\n  line-height: 0.5;\r\n}\r\n.card-name{\r\n  color: rgb(60, 136, 212);\r\n  font-weight: bold;\r\n}\r\n</style>\r\n\r\n"],"mappings":"AA0BA,OAAAA,GAAA;AACA,SAAAC,YAAA;AACA,OAAAC,aAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;MACAC,WAAA;MACAC,iBAAA;IACA;EACA;EACA,MAAAC,QAAA;IACA;MACA,MAAAC,QAAA,SAAAR,YAAA,CAAAS,KAAA;QACAA,KAAA,EAAAV,GAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACA;MAEA,IAAAK,SAAA,GAAAI,QAAA,CAAAL,IAAA,CAAAC,SAAA;;MAEA;MACA;MACAA,SAAA,GAAAA,SAAA,CAAAM,KAAA;;MAEA;MACA,SAAAC,OAAA,IAAAP,SAAA;QACA,MAAAQ,YAAA,SAAAX,aAAA,CAAAY,GAAA;UACAC,MAAA;YACAC,CAAA,KAAAJ,OAAA,CAAAT,IAAA;YACAc,UAAA;YACAC,QAAA;UACA;QACA;QACA,MAAAC,IAAA,GAAAN,YAAA,CAAAT,IAAA,CAAAgB,IAAA,KAAAC,YAAA;QACAT,OAAA,CAAAO,IAAA,GAAAA,IAAA;MACA;;MAEA;MACA,SAAAP,OAAA,IAAAP,SAAA;QACA,MAAAiB,aAAA,SAAApB,aAAA,CAAAY,GAAA;UACAC,MAAA;YACAC,CAAA,EAAAJ,OAAA,CAAAW,OAAA;YACAN,UAAA;YACAC,QAAA;UACA;QACA;QACA,MAAAM,KAAA,GAAAF,aAAA,CAAAlB,IAAA,CAAAgB,IAAA,KAAAC,YAAA;QACAT,OAAA,CAAAY,KAAA,GAAAA,KAAA;MACA;MAEA,KAAAnB,SAAA,GAAAA,SAAA;MACA,KAAAE,iBAAA,GAAAF,SAAA;IACA,SAAAoB,KAAA;MACAC,OAAA,CAAAD,KAAA,wCAAAA,KAAA;IACA;EACA;EACAE,QAAA;IACAC,gBAAA;MACA,KAAArB,iBAAA,QAAAF,SAAA,CAAAwB,MAAA,CAAAjB,OAAA,IACAA,OAAA,CAAAT,IAAA,CAAA2B,WAAA,GAAAC,QAAA,MAAAzB,WAAA,CAAAwB,WAAA,GACA;IACA;EACA;EACAE,KAAA;IACA1B,WAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}