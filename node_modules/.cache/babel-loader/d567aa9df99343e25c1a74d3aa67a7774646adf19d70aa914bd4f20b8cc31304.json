{"ast":null,"code":"import gql from 'graphql-tag';\nimport { apolloClient } from '@/apollo-client';\nimport pixabayClient from '@/axios';\nexport default {\n  name: 'HomeView',\n  data() {\n    return {\n      countries: [],\n      selectedCountry: null,\n      searchQuery: '',\n      regions: ['Santa Cruz', 'Cordoba', 'Jujuy', 'Tucuman'],\n      // Example regions\n      continents: [{\n        name: 'Europe',\n        selected: false\n      }, {\n        name: 'America',\n        selected: false\n      }, {\n        name: 'Asia',\n        selected: false\n      }, {\n        name: 'Oceania',\n        selected: false\n      }, {\n        name: 'Africa',\n        selected: false\n      }],\n      showContinentFilters: false\n    };\n  },\n  computed: {\n    filteredCountries() {\n      const searchQueryLower = this.searchQuery.toLowerCase();\n      const selectedContinents = this.continents.filter(continent => continent.selected).map(continent => continent.name);\n      return this.countries.filter(country => {\n        const matchesSearchQuery = country.name.toLowerCase().includes(searchQueryLower);\n        const matchesContinent = selectedContinents.length === 0 || selectedContinents.includes(country.continent.name);\n        return matchesSearchQuery && matchesContinent;\n      });\n    }\n  },\n  methods: {\n    async fetchCountries() {\n      try {\n        const response = await apolloClient.query({\n          query: gql`\n            query {\n              countries {\n                code\n                name\n                capital\n                currency\n                languages{\n                  native\n                }\n                continent {\n                  name\n                }\n              }\n            }\n          `\n        });\n        let countries = response.data.countries;\n\n        // Limitar a las primeras 12 países\n        //countries = countries.slice(0, 12);\n        countries = countries.slice(30, 44);\n\n        // Fetch images from Pixabay for each country flag\n        for (let country of countries) {\n          const flagResponse = await pixabayClient.get('', {\n            params: {\n              q: `${country.name} flag`,\n              image_type: 'photo',\n              per_page: 3\n            }\n          });\n          const flag = flagResponse.data.hits[0]?.webformatURL;\n          country.flag = flag;\n        }\n\n        // Fetch images from Pixabay for each country capital\n        for (let country of countries) {\n          const imageResponse = await pixabayClient.get('', {\n            params: {\n              q: country.capital,\n              image_type: 'photo',\n              per_page: 3\n            }\n          });\n          const image = imageResponse.data.hits[0]?.webformatURL;\n          country.image = image;\n        }\n        this.countries = countries;\n      } catch (error) {\n        console.error('Error fetching countries or images:', error);\n      }\n    },\n    selectCountry(country) {\n      this.selectedCountry = country;\n    },\n    closeDetails() {\n      this.selectedCountry = null;\n    },\n    filterCountriesByContinent() {\n      // Este método está intencionalmente vacío.\n    },\n    toggleContinentFilters(show) {\n      this.showContinentFilters = show;\n    },\n    hideContinentFilters() {\n      // Usar un setTimeout para retrasar el ocultamiento del filtro para permitir la selección de checkboxes\n      setTimeout(() => {\n        this.showContinentFilters = false;\n      }, 200);\n    },\n    getContinentImage(continentName) {\n      // Devuelve la ruta de la imagen correspondiente a cada continente\n      return require(`@/assets/${continentName.toLowerCase()}.png`);\n    }\n  },\n  mounted() {\n    this.fetchCountries();\n  }\n};","map":{"version":3,"names":["gql","apolloClient","pixabayClient","name","data","countries","selectedCountry","searchQuery","regions","continents","selected","showContinentFilters","computed","filteredCountries","searchQueryLower","toLowerCase","selectedContinents","filter","continent","map","country","matchesSearchQuery","includes","matchesContinent","length","methods","fetchCountries","response","query","slice","flagResponse","get","params","q","image_type","per_page","flag","hits","webformatURL","imageResponse","capital","image","error","console","selectCountry","closeDetails","filterCountriesByContinent","toggleContinentFilters","show","hideContinentFilters","setTimeout","getContinentImage","continentName","require","mounted"],"sources":["src/views/HomeView.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"search-bar\">\r\n      <input type=\"text\" v-model=\"searchQuery\" placeholder=\"Escribe el país que deseas ver..\" class=\"search-bar\" @focus=\"toggleContinentFilters(true)\" @blur=\"hideContinentFilters\" />\r\n      <button @click=\"searchQuery\">\r\n        <i class=\"fa fa-search\"></i> Buscar\r\n      </button>\r\n    </div>\r\n\r\n    <!-- Nueva sección de filtro de continentes -->\r\n    <div v-show=\"showContinentFilters\" class=\"continent-filters\">\r\n      <div class=\"filtro\">\r\n        <p>Filtrar por continentes</p>\r\n      </div>\r\n      <div v-for=\"continent in continents\" :key=\"continent.name\" class=\"continent-filter\">\r\n        <img :src=\"getContinentImage(continent.name)\" :alt=\"continent.name\" class=\"continent-image\" :class=\"{ selected: continent.selected }\" @click=\"toggleContinentSelection(continent)\" />\r\n        <label>{{ continent.name }}</label>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"card-deck\" :class=\"{ 'two-columns': selectedCountry }\">\r\n      <div class=\"card\" v-for=\"country in filteredCountries\" :key=\"country.code\" @click=\"selectCountry(country)\">\r\n        <img class=\"card-img-top\" :src=\"country.image\" alt=\"Country image\">\r\n        <div class=\"card-body\">\r\n          <img class=\"flag-icon\" :src=\"country.flag\" alt=\"Country flag\">\r\n          <div class=\"card-data\">\r\n            <p class=\"card-name\">{{ country.name }}</p>\r\n            <p class=\"card-continent\">{{ country.continent.name }}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div v-if=\"selectedCountry\" class=\"detailed-view\">\r\n      <button class=\"close\" @click=\"closeDetails\">X</button>\r\n      <img :src=\"selectedCountry.image\" alt=\"Capital image\" class=\"detail-image\">\r\n      <div class=\"selected-header\">\r\n        <img :src=\"selectedCountry.flag\" alt=\"Country flag\" class=\"detail-flag\">\r\n        <div class=\"selected-names\">\r\n          <p class=\"card-name\"><strong>{{ selectedCountry.name }}</strong></p>\r\n          <p>{{ selectedCountry.continent.name }}</p>\r\n        </div>\r\n        \r\n      </div>\r\n      <div class=\"selected-dates\">\r\n        <p class=\"card-name\">Capital:</p>\r\n        <p class=\"date\">{{ selectedCountry.capital }}</p>\r\n      </div>\r\n      <div class=\"selected-dates\">\r\n        <p class=\"card-name\">Language:</p> \r\n        <p class=\"date\">{{ selectedCountry.languages.map(lang => lang.native).join(', ') }}</p>\r\n      </div>\r\n      <div class=\"selected-dates\">\r\n        <p class=\"card-name\">Population:</p>\r\n        <p class=\"date\">500k people</p>\r\n      </div>\r\n      <div class=\"selected-dates\">\r\n        <p class=\"card-name\">Currency:</p>\r\n        <p class=\"date\">{{ selectedCountry.currency }}</p>\r\n      </div>\r\n      <div class=\"selected-region\">\r\n        <p class=\"card-name\">Region</p>\r\n        <select class=\"custom-select\">\r\n          <option v-for=\"region in regions\" :key=\"region\">{{ region }}</option>\r\n        </select>\r\n      </div>\r\n      \r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport gql from 'graphql-tag';\r\nimport { apolloClient } from '@/apollo-client';\r\nimport pixabayClient from '@/axios';\r\n\r\nexport default {\r\n  name: 'HomeView',\r\n  data() {\r\n    return {\r\n      countries: [],\r\n      selectedCountry: null,\r\n      searchQuery: '',\r\n      regions: ['Santa Cruz', 'Cordoba', 'Jujuy', 'Tucuman'], // Example regions\r\n      continents: [\r\n        { name: 'Europe', selected: false },\r\n        { name: 'America', selected: false },\r\n        { name: 'Asia', selected: false },\r\n        { name: 'Oceania', selected: false },\r\n        { name: 'Africa', selected: false }\r\n      ],\r\n      showContinentFilters: false\r\n    };\r\n  },\r\n  computed: {\r\n    filteredCountries() {\r\n      const searchQueryLower = this.searchQuery.toLowerCase();\r\n      const selectedContinents = this.continents.filter(continent => continent.selected).map(continent => continent.name);\r\n\r\n      return this.countries.filter(country => {\r\n        const matchesSearchQuery = country.name.toLowerCase().includes(searchQueryLower);\r\n        const matchesContinent = selectedContinents.length === 0 || selectedContinents.includes(country.continent.name);\r\n        return matchesSearchQuery && matchesContinent;\r\n      });\r\n    }\r\n  },\r\n  methods: {\r\n    async fetchCountries() {\r\n      try {\r\n        const response = await apolloClient.query({\r\n          query: gql`\r\n            query {\r\n              countries {\r\n                code\r\n                name\r\n                capital\r\n                currency\r\n                languages{\r\n                  native\r\n                }\r\n                continent {\r\n                  name\r\n                }\r\n              }\r\n            }\r\n          `,\r\n        });\r\n\r\n        let countries = response.data.countries;\r\n\r\n        // Limitar a las primeras 12 países\r\n        //countries = countries.slice(0, 12);\r\n        countries = countries.slice(30, 44);\r\n\r\n        // Fetch images from Pixabay for each country flag\r\n        for (let country of countries) {\r\n          const flagResponse = await pixabayClient.get('', {\r\n            params: {\r\n              q: `${country.name} flag`,\r\n              image_type: 'photo',\r\n              per_page: 3,\r\n            },\r\n          });\r\n          const flag = flagResponse.data.hits[0]?.webformatURL;\r\n          country.flag = flag;\r\n        }\r\n\r\n        // Fetch images from Pixabay for each country capital\r\n        for (let country of countries) {\r\n          const imageResponse = await pixabayClient.get('', {\r\n            params: {\r\n              q: country.capital,\r\n              image_type: 'photo',\r\n              per_page: 3,\r\n            },\r\n          });\r\n          const image = imageResponse.data.hits[0]?.webformatURL;\r\n          country.image = image;\r\n        }\r\n\r\n        this.countries = countries;\r\n      } catch (error) {\r\n        console.error('Error fetching countries or images:', error);\r\n      }\r\n    },\r\n    selectCountry(country) {\r\n      this.selectedCountry = country;\r\n    },\r\n    closeDetails() {\r\n      this.selectedCountry = null;\r\n    },\r\n    filterCountriesByContinent() {\r\n      // Este método está intencionalmente vacío.\r\n    },\r\n    toggleContinentFilters(show) {\r\n      this.showContinentFilters = show;\r\n    },\r\n    hideContinentFilters() {\r\n      // Usar un setTimeout para retrasar el ocultamiento del filtro para permitir la selección de checkboxes\r\n      setTimeout(() => {\r\n        this.showContinentFilters = false;\r\n      }, 200);\r\n    },\r\n    getContinentImage(continentName) {\r\n      // Devuelve la ruta de la imagen correspondiente a cada continente\r\n      return require(`@/assets/${continentName.toLowerCase()}.png`);\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchCountries();\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.search-bar {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n}\r\n.search-bar input {\r\n  flex: 1;\r\n  padding: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 20px;\r\n  margin-right: 10px;\r\n}\r\n.search-bar button {\r\n  background-color: #007bff;\r\n  color: #fff;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  border-radius: 20px;\r\n  cursor: pointer;\r\n}\r\n.search-bar button i {\r\n  margin-right: 5px;\r\n}\r\n.continent-filters {\r\n  display: block;\r\n  flex-wrap: wrap;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.continent-filter {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-right: 10px;\r\n}\r\n\r\n.continent-image {\r\n  width: 50px;\r\n  height: 50px;\r\n  margin-right: 5px;\r\n}\r\n\r\n.continent-filter input {\r\n  margin-right: 5px;\r\n}\r\n.card-deck {\r\n  display: grid !important;\r\n  grid-template-columns: repeat(3, 1fr) !important;\r\n  gap: 20px !important;\r\n  padding: 1.5rem !important;\r\n}\r\n.card-deck.two-columns {\r\n  grid-template-columns: repeat(2, 1fr) !important;\r\n  width: 45%;\r\n}\r\n.card {\r\n  width: 18rem;\r\n  margin-bottom: 1.5rem;\r\n  border: 1px solid #ccc;\r\n  border-radius: 20px;\r\n  box-shadow: 4px 8px 10px rgba(0, 0, 0, 0.1);\r\n}\r\n.card-body {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n.card-img-top {\r\n  height: 10rem;\r\n}\r\n.flag-icon {\r\n  width: 50px;\r\n  height: 40px;\r\n  margin-right: 10px;\r\n  vertical-align: middle;\r\n}\r\n.card-data {\r\n  display: block;\r\n  line-height: 0.5;\r\n}\r\n.card-name {\r\n  color: rgb(60, 136, 212);\r\n  font-weight: bold;\r\n}\r\n.detailed-view {\r\n  position: fixed;\r\n  top: 15%;\r\n  right: 5%;\r\n  width: 25%;\r\n  background: white;\r\n  box-shadow: 4px 4px 4px 8px rgba(0, 0, 0, 0.2);\r\n  padding: 20px;\r\n  border-radius: 1rem;\r\n  z-index: 10;\r\n}\r\n.detail-image {\r\n  width: 100%;\r\n  height: 7rem;\r\n}\r\n.detail-flag {\r\n  width: 60px;\r\n  height: 40px;\r\n  margin-top: 30px;\r\n}\r\n.selected-header{\r\n  display: flex;\r\n}\r\n.selected-names{\r\n  display: block;\r\n  margin-left: 15px;\r\n  margin-top: 35px;\r\n  line-height: 0.5;\r\n}\r\n.selected-dates{\r\n  display: flex;\r\n}\r\n.selected-region{\r\n  display: block;\r\n}\r\n.date{\r\n  margin-left: 10px;\r\n}\r\n.custom-select {\r\n  width: 100%; \r\n  padding: 10px; \r\n  border: 1px solid #ccc; \r\n  border-radius: 5px; \r\n  background-color: #fff;\r\n  color: #333; \r\n  font-size: 16px; \r\n  appearance: none; \r\n  -webkit-appearance: none; \r\n  -moz-appearance: none; \r\n}\r\n.custom-select option {\r\n  background-color: #fff; \r\n  color: #333; \r\n  padding: 10px; \r\n}\r\n.close {\r\n  background-color: #f44336; \r\n  border: none;\r\n  border-radius: 50%; \r\n  padding: 10px; \r\n  font-size: 3px; \r\n  cursor: pointer;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); \r\n  transition: background-color 0.3s, box-shadow 0.3s; \r\n}\r\n\r\n.close:hover {\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\r\n}\r\n\r\n.close:focus {\r\n  outline: none;\r\n  box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.5);\r\n}\r\n</style>\r\n"],"mappings":"AAuEA,OAAAA,GAAA;AACA,SAAAC,YAAA;AACA,OAAAC,aAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;MACAC,eAAA;MACAC,WAAA;MACAC,OAAA;MAAA;MACAC,UAAA,GACA;QAAAN,IAAA;QAAAO,QAAA;MAAA,GACA;QAAAP,IAAA;QAAAO,QAAA;MAAA,GACA;QAAAP,IAAA;QAAAO,QAAA;MAAA,GACA;QAAAP,IAAA;QAAAO,QAAA;MAAA,GACA;QAAAP,IAAA;QAAAO,QAAA;MAAA,EACA;MACAC,oBAAA;IACA;EACA;EACAC,QAAA;IACAC,kBAAA;MACA,MAAAC,gBAAA,QAAAP,WAAA,CAAAQ,WAAA;MACA,MAAAC,kBAAA,QAAAP,UAAA,CAAAQ,MAAA,CAAAC,SAAA,IAAAA,SAAA,CAAAR,QAAA,EAAAS,GAAA,CAAAD,SAAA,IAAAA,SAAA,CAAAf,IAAA;MAEA,YAAAE,SAAA,CAAAY,MAAA,CAAAG,OAAA;QACA,MAAAC,kBAAA,GAAAD,OAAA,CAAAjB,IAAA,CAAAY,WAAA,GAAAO,QAAA,CAAAR,gBAAA;QACA,MAAAS,gBAAA,GAAAP,kBAAA,CAAAQ,MAAA,UAAAR,kBAAA,CAAAM,QAAA,CAAAF,OAAA,CAAAF,SAAA,CAAAf,IAAA;QACA,OAAAkB,kBAAA,IAAAE,gBAAA;MACA;IACA;EACA;EACAE,OAAA;IACA,MAAAC,eAAA;MACA;QACA,MAAAC,QAAA,SAAA1B,YAAA,CAAA2B,KAAA;UACAA,KAAA,EAAA5B,GAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QACA;QAEA,IAAAK,SAAA,GAAAsB,QAAA,CAAAvB,IAAA,CAAAC,SAAA;;QAEA;QACA;QACAA,SAAA,GAAAA,SAAA,CAAAwB,KAAA;;QAEA;QACA,SAAAT,OAAA,IAAAf,SAAA;UACA,MAAAyB,YAAA,SAAA5B,aAAA,CAAA6B,GAAA;YACAC,MAAA;cACAC,CAAA,KAAAb,OAAA,CAAAjB,IAAA;cACA+B,UAAA;cACAC,QAAA;YACA;UACA;UACA,MAAAC,IAAA,GAAAN,YAAA,CAAA1B,IAAA,CAAAiC,IAAA,KAAAC,YAAA;UACAlB,OAAA,CAAAgB,IAAA,GAAAA,IAAA;QACA;;QAEA;QACA,SAAAhB,OAAA,IAAAf,SAAA;UACA,MAAAkC,aAAA,SAAArC,aAAA,CAAA6B,GAAA;YACAC,MAAA;cACAC,CAAA,EAAAb,OAAA,CAAAoB,OAAA;cACAN,UAAA;cACAC,QAAA;YACA;UACA;UACA,MAAAM,KAAA,GAAAF,aAAA,CAAAnC,IAAA,CAAAiC,IAAA,KAAAC,YAAA;UACAlB,OAAA,CAAAqB,KAAA,GAAAA,KAAA;QACA;QAEA,KAAApC,SAAA,GAAAA,SAAA;MACA,SAAAqC,KAAA;QACAC,OAAA,CAAAD,KAAA,wCAAAA,KAAA;MACA;IACA;IACAE,cAAAxB,OAAA;MACA,KAAAd,eAAA,GAAAc,OAAA;IACA;IACAyB,aAAA;MACA,KAAAvC,eAAA;IACA;IACAwC,2BAAA;MACA;IAAA,CACA;IACAC,uBAAAC,IAAA;MACA,KAAArC,oBAAA,GAAAqC,IAAA;IACA;IACAC,qBAAA;MACA;MACAC,UAAA;QACA,KAAAvC,oBAAA;MACA;IACA;IACAwC,kBAAAC,aAAA;MACA;MACA,OAAAC,OAAA,aAAAD,aAAA,CAAArC,WAAA;IACA;EACA;EACAuC,QAAA;IACA,KAAA5B,cAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}